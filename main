var INCREMENT = .01; 
var XZOOM = 20; 
var YZOOM = XZOOM * getHeight() / getWidth(); 
var ySpacing = getHeight() / YZOOM; 
var xSpacing = getWidth() / XZOOM; 
var oX = getWidth()/2; 
var oY = getHeight()/2; 
var xMAX = (getWidth() - oX)/xSpacing; 
var xMIN = -(oX)/xSpacing; var pointList = []; 
var originalPoints = []; 

// defines the rule for the function 

function yRule(x) { var value = 1/(x*x+2); 
                    return value; 
} 
                  
function start() { refresh(); 
                   println("1) Use the arrow keys to inc/dec zoom");
                   println("2) 'r' to reset axes"); 
                   println("3) 'f' to use the Zoom Fit Feature"); 
                   mouseClickMethod(setOrigin); 
                   keyDownMethod(changeZoom); 
 }
 
// User can zoom out(down) or zoom in(up) with the keyboard 

function changeZoom(e) { if (e.keyCode == Keyboard.DOWN && YZOOM>5)
                         		{ YZOOM -= 5; 
                         } 
                         if (e.keyCode == Keyboard.UP) 
                         		{YZOOM += 5; 
                         } 
                         if(e.keyCode == Keyboard.RIGHT) 
                         		{ XZOOM += 5; 
                         } 
                         if(e.keyCode == Keyboard.LEFT && XZOOM > 5) 
                         		{ XZOOM -= 5; 
                         } 
                         if(e.keyCode == Keyboard.letter('r'))  
                         		{XZOOM = 20; 
                         		YZOOM = XZOOM * getHeight() / getWidth(); 
                         		oX = getWidth()/2; 
                         		oY = getHeight()/2;
                         } 
                         
// Resets the Zoom variables 

		ySpacing = getHeight() / YZOOM; 
		xSpacing = getWidth() / XZOOM; 
		xMAX = (getWidth() - oX)/xSpacing; 
		xMIN = -(oX)/xSpacing; 
		refresh(); 
		if(e.keyCode == Keyboard.letter('f')) 
			{ zoomFit(); 
		} 
} 

// This function takes the current xMIN/xMAX and sets the Yzoom level to fit the highest and lowest points on the screen 

function zoomFit() { 
      var yList = []; 
      for (var i = 0; i < originalPoints.length; i++) 
        { yList.push(originalPoints[i][1]); 
        } 
        var ySort = sort(yList); 
        var yMAX = ySort[0]; 
        var yMIN = ySort[ySort.length-1]; 
        ySpacing = getHeight() / Math.abs(yMAX - yMIN); 
        oY = yMIN*ySpacing; refresh(); 
        } 
//This function sorts a list from lowest to highest 

function sort(list) { 
      var finalSort = []; 
      while(list.length > 0){ 
        var lowIndex = 0; 
        for (var i = 1; i < list.length; i++) { 
          if(list[lowIndex] < list[i]) { lowIndex = lowIndex; }
          else{ lowIndex = i; 
          } 
        } 
        finalSort.push(list[lowIndex]); 
        list.remove(lowIndex); 
      } return finalSort; 
} 

// Creates the list of points on the graph from xMIN to xMAX 

function points() { 
   for (var i = xMIN; i < xMAX; i += INCREMENT) { 
    var point = [i, yRule(i)]; 
    originalPoints.push(point); 
    pointList.push(coordinateMap(point)); 
   }
} 

// The mouseClick moves the origin to the current location 

function setOrigin(e) { 
  oX = e.getX(); 
  oY = e.getY(); 
  xMAX = (getWidth() - oX)/xSpacing; 
  xMIN = -(oX)/xSpacing; refresh(); 
} 

function refresh() { 
  removeAll(); 
  pointList = []; 
  originalPoints = []; 
  createAxes(); 
  points(); 
  drawGraph(); 
 } 
 
 // Draws segments connecting consecutive points in pointList creating the 'graph' 
 
 function drawGraph() { 
  for (var i = 0; i < pointList.length - 1; i++) { 
    var segment = new Line(pointList[i][0],pointList[i][1],pointList[i+1][0],pointList[i+1][1]); 
    segment.setColor(Color.red); 
    add(segment); 
   } 
  } 
  
  // This function creates the x and y axes with tick marks based on the variable XZOOM. The y axis stays in a square proportion by default. 
  
  function createAxes() { 
    yAxis = new Line(oX,0,oX,getHeight()); 
    xAxis = new Line(0, oY, getWidth(), oY); 
    add(yAxis); 
    add(xAxis); 
    for (var i = oX; i <= getWidth(); i+=xSpacing) 
      { var xTick = new Line(i, oY + 2, i, oY - 2); 
      add(xTick); 
     } 
     for (var i = oX; i >= 0; i -=xSpacing) { 
      var xTick = new Line(i, oY + 2, i, oY - 2); 
      add(xTick); 
     } 
     for (var i = oY; i <= getHeight(); i+=ySpacing) { 
      var yTick = new Line(oX - 2,i, oX + 2,i ); 
      add(yTick); 
     } 
     for (var i = oY; i >= 0; i-=ySpacing) { 
      var yTick = new Line(oX - 2,i, oX + 2,i ); 
      add(yTick); 
     } 
    } 
    
    // Maps user defined coordinates into codeHS coordinates input should be of the form [x,y] and will return such
    
    function coordinateMap(input) { 
      var realX = oX + input[0] * xSpacing; 
      var realY = oY - input[1] * ySpacing; 
      var realCoordinates = [realX,realY]; 
      return realCoordinates; 
     }
